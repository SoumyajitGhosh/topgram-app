{"ast":null,"code":"import { cancelFrame, steps, frame } from '../../frameloop/index.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero, aspectRatio } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { record } from '../../debug/record.mjs';\nimport { isSVGElement } from '../../render/dom/utils/is-svg-element.mjs';\nimport { animateSingleValue } from '../../animation/interfaces/single-value.mjs';\nimport { frameData } from '../../frameloop/data.mjs';\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\n\nconst animationTarget = 1000;\nlet id = 0;\n/**\n * Use a mutable data object for debug data so as to not create a new\n * object every frame.\n */\n\nconst projectionFrameData = {\n  type: \"projectionFrame\",\n  totalNodes: 0,\n  resolvedTargetDeltas: 0,\n  recalculatedProjection: 0\n};\n\nfunction createProjectionNode({\n  attachResizeListener,\n  defaultParent,\n  measureScroll,\n  checkIsScrollRoot,\n  resetTransform\n}) {\n  return class ProjectionNode {\n    constructor(elementId, latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n      /**\n       * A unique ID generated for every projection node.\n       */\n      this.id = id++;\n      /**\n       * An id that represents a unique session instigated by startUpdate.\n       */\n\n      this.animationId = 0;\n      /**\n       * A Set containing all this component's children. This is used to iterate\n       * through the children.\n       *\n       * TODO: This could be faster to iterate as a flat array stored on the root node.\n       */\n\n      this.children = new Set();\n      /**\n       * Options for the node. We use this to configure what kind of layout animations\n       * we should perform (if any).\n       */\n\n      this.options = {};\n      /**\n       * We use this to detect when its safe to shut down part of a projection tree.\n       * We have to keep projecting children for scale correction and relative projection\n       * until all their parents stop performing layout animations.\n       */\n\n      this.isTreeAnimating = false;\n      this.isAnimationBlocked = false;\n      /**\n       * Flag to true if we think this layout has been changed. We can't always know this,\n       * currently we set it to true every time a component renders, or if it has a layoutDependency\n       * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n       * and if one node is dirtied, they all are.\n       */\n\n      this.isLayoutDirty = false;\n      /**\n       * Flag to true if we think the projection calculations for this node needs\n       * recalculating as a result of an updated transform or layout animation.\n       */\n\n      this.isProjectionDirty = false;\n      /**\n       * Flag to true if the layout *or* transform has changed. This then gets propagated\n       * throughout the projection tree, forcing any element below to recalculate on the next frame.\n       */\n\n      this.isSharedProjectionDirty = false;\n      /**\n       * Flag transform dirty. This gets propagated throughout the whole tree but is only\n       * respected by shared nodes.\n       */\n\n      this.isTransformDirty = false;\n      /**\n       * Block layout updates for instant layout transitions throughout the tree.\n       */\n\n      this.updateManuallyBlocked = false;\n      this.updateBlockedByResize = false;\n      /**\n       * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n       * call.\n       */\n\n      this.isUpdating = false;\n      /**\n       * If this is an SVG element we currently disable projection transforms\n       */\n\n      this.isSVG = false;\n      /**\n       * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n       * its projection styles.\n       */\n\n      this.needsReset = false;\n      /**\n       * Flags whether this node should have its transform reset prior to measuring.\n       */\n\n      this.shouldResetTransform = false;\n      /**\n       * An object representing the calculated contextual/accumulated/tree scale.\n       * This will be used to scale calculcated projection transforms, as these are\n       * calculated in screen-space but need to be scaled for elements to layoutly\n       * make it to their calculated destinations.\n       *\n       * TODO: Lazy-init\n       */\n\n      this.treeScale = {\n        x: 1,\n        y: 1\n      };\n      /**\n       *\n       */\n\n      this.eventHandlers = new Map(); // Note: Currently only running on root node\n\n      this.potentialNodes = new Map();\n\n      this.checkUpdateFailed = () => {\n        if (this.isUpdating) {\n          this.isUpdating = false;\n          this.clearAllSnapshots();\n        }\n      };\n      /**\n       * This is a multi-step process as shared nodes might be of different depths. Nodes\n       * are sorted by depth order, so we need to resolve the entire tree before moving to\n       * the next step.\n       */\n\n\n      this.updateProjection = () => {\n        /**\n         * Reset debug counts. Manually resetting rather than creating a new\n         * object each frame.\n         */\n        projectionFrameData.totalNodes = projectionFrameData.resolvedTargetDeltas = projectionFrameData.recalculatedProjection = 0;\n        this.nodes.forEach(propagateDirtyNodes);\n        this.nodes.forEach(resolveTargetDelta);\n        this.nodes.forEach(calcProjection);\n        this.nodes.forEach(cleanDirtyNodes);\n        record(projectionFrameData);\n      };\n\n      this.hasProjected = false;\n      this.isVisible = true;\n      this.animationProgress = 0;\n      /**\n       * Shared layout\n       */\n      // TODO Only running on root node\n\n      this.sharedNodes = new Map();\n      this.elementId = elementId;\n      this.latestValues = latestValues;\n      this.root = parent ? parent.root || parent : this;\n      this.path = parent ? [...parent.path, parent] : [];\n      this.parent = parent;\n      this.depth = parent ? parent.depth + 1 : 0;\n      elementId && this.root.registerPotentialNode(elementId, this);\n\n      for (let i = 0; i < this.path.length; i++) {\n        this.path[i].shouldResetTransform = true;\n      }\n\n      if (this.root === this) this.nodes = new FlatTree();\n    }\n\n    addEventListener(name, handler) {\n      if (!this.eventHandlers.has(name)) {\n        this.eventHandlers.set(name, new SubscriptionManager());\n      }\n\n      return this.eventHandlers.get(name).add(handler);\n    }\n\n    notifyListeners(name, ...args) {\n      const subscriptionManager = this.eventHandlers.get(name);\n      subscriptionManager && subscriptionManager.notify(...args);\n    }\n\n    hasListeners(name) {\n      return this.eventHandlers.has(name);\n    }\n\n    registerPotentialNode(elementId, node) {\n      this.potentialNodes.set(elementId, node);\n    }\n    /**\n     * Lifecycles\n     */\n\n\n    mount(instance, isLayoutDirty = false) {\n      if (this.instance) return;\n      this.isSVG = isSVGElement(instance);\n      this.instance = instance;\n      const {\n        layoutId,\n        layout,\n        visualElement\n      } = this.options;\n\n      if (visualElement && !visualElement.current) {\n        visualElement.mount(instance);\n      }\n\n      this.root.nodes.add(this);\n      this.parent && this.parent.children.add(this);\n      this.elementId && this.root.potentialNodes.delete(this.elementId);\n\n      if (isLayoutDirty && (layout || layoutId)) {\n        this.isLayoutDirty = true;\n      }\n\n      if (attachResizeListener) {\n        let cancelDelay;\n\n        const resizeUnblockUpdate = () => this.root.updateBlockedByResize = false;\n\n        attachResizeListener(instance, () => {\n          this.root.updateBlockedByResize = true;\n          cancelDelay && cancelDelay();\n          cancelDelay = delay(resizeUnblockUpdate, 250);\n\n          if (globalProjectionState.hasAnimatedSinceResize) {\n            globalProjectionState.hasAnimatedSinceResize = false;\n            this.nodes.forEach(finishAnimation);\n          }\n        });\n      }\n\n      if (layoutId) {\n        this.root.registerSharedNode(layoutId, this);\n      } // Only register the handler if it requires layout animation\n\n\n      if (this.options.animate !== false && visualElement && (layoutId || layout)) {\n        this.addEventListener(\"didUpdate\", ({\n          delta,\n          hasLayoutChanged,\n          hasRelativeTargetChanged,\n          layout: newLayout\n        }) => {\n          if (this.isTreeAnimationBlocked()) {\n            this.target = undefined;\n            this.relativeTarget = undefined;\n            return;\n          } // TODO: Check here if an animation exists\n\n\n          const layoutTransition = this.options.transition || visualElement.getDefaultTransition() || defaultLayoutTransition;\n          const {\n            onLayoutAnimationStart,\n            onLayoutAnimationComplete\n          } = visualElement.getProps();\n          /**\n           * The target layout of the element might stay the same,\n           * but its position relative to its parent has changed.\n           */\n\n          const targetChanged = !this.targetLayout || !boxEquals(this.targetLayout, newLayout) || hasRelativeTargetChanged;\n          /**\n           * If the layout hasn't seemed to have changed, it might be that the\n           * element is visually in the same place in the document but its position\n           * relative to its parent has indeed changed. So here we check for that.\n           */\n\n          const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n\n          if (this.options.layoutRoot || this.resumeFrom && this.resumeFrom.instance || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !this.currentAnimation)) {\n            if (this.resumeFrom) {\n              this.resumingFrom = this.resumeFrom;\n              this.resumingFrom.resumingFrom = undefined;\n            }\n\n            this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n            const animationOptions = { ...getValueTransition(layoutTransition, \"layout\"),\n              onPlay: onLayoutAnimationStart,\n              onComplete: onLayoutAnimationComplete\n            };\n\n            if (visualElement.shouldReduceMotion || this.options.layoutRoot) {\n              animationOptions.delay = 0;\n              animationOptions.type = false;\n            }\n\n            this.startAnimation(animationOptions);\n          } else {\n            /**\n             * If the layout hasn't changed and we have an animation that hasn't started yet,\n             * finish it immediately. Otherwise it will be animating from a location\n             * that was probably never commited to screen and look like a jumpy box.\n             */\n            if (!hasLayoutChanged && this.animationProgress === 0) {\n              finishAnimation(this);\n            }\n\n            if (this.isLead() && this.options.onExitComplete) {\n              this.options.onExitComplete();\n            }\n          }\n\n          this.targetLayout = newLayout;\n        });\n      }\n    }\n\n    unmount() {\n      this.options.layoutId && this.willUpdate();\n      this.root.nodes.remove(this);\n      const stack = this.getStack();\n      stack && stack.remove(this);\n      this.parent && this.parent.children.delete(this);\n      this.instance = undefined;\n      cancelFrame(this.updateProjection);\n    } // only on the root\n\n\n    blockUpdate() {\n      this.updateManuallyBlocked = true;\n    }\n\n    unblockUpdate() {\n      this.updateManuallyBlocked = false;\n    }\n\n    isUpdateBlocked() {\n      return this.updateManuallyBlocked || this.updateBlockedByResize;\n    }\n\n    isTreeAnimationBlocked() {\n      return this.isAnimationBlocked || this.parent && this.parent.isTreeAnimationBlocked() || false;\n    } // Note: currently only running on root node\n\n\n    startUpdate() {\n      if (this.isUpdateBlocked()) return;\n      this.isUpdating = true;\n      this.nodes && this.nodes.forEach(resetRotation);\n      this.animationId++;\n    }\n\n    getTransformTemplate() {\n      const {\n        visualElement\n      } = this.options;\n      return visualElement && visualElement.getProps().transformTemplate;\n    }\n\n    willUpdate(shouldNotifyListeners = true) {\n      if (this.root.isUpdateBlocked()) {\n        this.options.onExitComplete && this.options.onExitComplete();\n        return;\n      }\n\n      !this.root.isUpdating && this.root.startUpdate();\n      if (this.isLayoutDirty) return;\n      this.isLayoutDirty = true;\n\n      for (let i = 0; i < this.path.length; i++) {\n        const node = this.path[i];\n        node.shouldResetTransform = true;\n        node.updateScroll(\"snapshot\");\n\n        if (node.options.layoutRoot) {\n          node.willUpdate(false);\n        }\n      }\n\n      const {\n        layoutId,\n        layout\n      } = this.options;\n      if (layoutId === undefined && !layout) return;\n      const transformTemplate = this.getTransformTemplate();\n      this.prevTransformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, \"\") : undefined;\n      this.updateSnapshot();\n      shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n    } // Note: Currently only running on root node\n\n\n    didUpdate() {\n      const updateWasBlocked = this.isUpdateBlocked(); // When doing an instant transition, we skip the layout update,\n      // but should still clean up the measurements so that the next\n      // snapshot could be taken correctly.\n\n      if (updateWasBlocked) {\n        this.unblockUpdate();\n        this.clearAllSnapshots();\n        this.nodes.forEach(clearMeasurements);\n        return;\n      }\n\n      if (!this.isUpdating) return;\n      this.isUpdating = false;\n      /**\n       * Search for and mount newly-added projection elements.\n       *\n       * TODO: Every time a new component is rendered we could search up the tree for\n       * the closest mounted node and query from there rather than document.\n       */\n\n      if (this.potentialNodes.size) {\n        this.potentialNodes.forEach(mountNodeEarly);\n        this.potentialNodes.clear();\n      }\n      /**\n       * Write\n       */\n\n\n      this.nodes.forEach(resetTransformStyle);\n      /**\n       * Read ==================\n       */\n      // Update layout measurements of updated children\n\n      this.nodes.forEach(updateLayout);\n      /**\n       * Write\n       */\n      // Notify listeners that the layout is updated\n\n      this.nodes.forEach(notifyLayoutUpdate);\n      this.clearAllSnapshots(); // Flush any scheduled updates\n\n      steps.update.process(frameData);\n      steps.preRender.process(frameData);\n      steps.render.process(frameData);\n    }\n\n    clearAllSnapshots() {\n      this.nodes.forEach(clearSnapshot);\n      this.sharedNodes.forEach(removeLeadSnapshots);\n    }\n\n    scheduleUpdateProjection() {\n      frame.preRender(this.updateProjection, false, true);\n    }\n\n    scheduleCheckAfterUnmount() {\n      /**\n       * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n       * we manually call didUpdate to give a chance to the siblings to animate.\n       * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n       */\n      frame.postRender(() => {\n        if (this.isLayoutDirty) {\n          this.root.didUpdate();\n        } else {\n          this.root.checkUpdateFailed();\n        }\n      });\n    }\n    /**\n     * Update measurements\n     */\n\n\n    updateSnapshot() {\n      if (this.snapshot || !this.instance) return;\n      this.snapshot = this.measure();\n    }\n\n    updateLayout() {\n      if (!this.instance) return; // TODO: Incorporate into a forwarded scroll offset\n\n      this.updateScroll();\n\n      if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {\n        return;\n      }\n      /**\n       * When a node is mounted, it simply resumes from the prevLead's\n       * snapshot instead of taking a new one, but the ancestors scroll\n       * might have updated while the prevLead is unmounted. We need to\n       * update the scroll again to make sure the layout we measure is\n       * up to date.\n       */\n\n\n      if (this.resumeFrom && !this.resumeFrom.instance) {\n        for (let i = 0; i < this.path.length; i++) {\n          const node = this.path[i];\n          node.updateScroll();\n        }\n      }\n\n      const prevLayout = this.layout;\n      this.layout = this.measure(false);\n      this.layoutCorrected = createBox();\n      this.isLayoutDirty = false;\n      this.projectionDelta = undefined;\n      this.notifyListeners(\"measure\", this.layout.layoutBox);\n      const {\n        visualElement\n      } = this.options;\n      visualElement && visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n    }\n\n    updateScroll(phase = \"measure\") {\n      let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n\n      if (this.scroll && this.scroll.animationId === this.root.animationId && this.scroll.phase === phase) {\n        needsMeasurement = false;\n      }\n\n      if (needsMeasurement) {\n        this.scroll = {\n          animationId: this.root.animationId,\n          phase,\n          isRoot: checkIsScrollRoot(this.instance),\n          offset: measureScroll(this.instance)\n        };\n      }\n    }\n\n    resetTransform() {\n      if (!resetTransform) return;\n      const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n      const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n      const transformTemplate = this.getTransformTemplate();\n      const transformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, \"\") : undefined;\n      const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n\n      if (isResetRequested && (hasProjection || hasTransform(this.latestValues) || transformTemplateHasChanged)) {\n        resetTransform(this.instance, transformTemplateValue);\n        this.shouldResetTransform = false;\n        this.scheduleRender();\n      }\n    }\n\n    measure(removeTransform = true) {\n      const pageBox = this.measurePageBox();\n      let layoutBox = this.removeElementScroll(pageBox);\n      /**\n       * Measurements taken during the pre-render stage\n       * still have transforms applied so we remove them\n       * via calculation.\n       */\n\n      if (removeTransform) {\n        layoutBox = this.removeTransform(layoutBox);\n      }\n\n      roundBox(layoutBox);\n      return {\n        animationId: this.root.animationId,\n        measuredBox: pageBox,\n        layoutBox,\n        latestValues: {},\n        source: this.id\n      };\n    }\n\n    measurePageBox() {\n      const {\n        visualElement\n      } = this.options;\n      if (!visualElement) return createBox();\n      const box = visualElement.measureViewportBox(); // Remove viewport scroll to give page-relative coordinates\n\n      const {\n        scroll\n      } = this.root;\n\n      if (scroll) {\n        translateAxis(box.x, scroll.offset.x);\n        translateAxis(box.y, scroll.offset.y);\n      }\n\n      return box;\n    }\n\n    removeElementScroll(box) {\n      const boxWithoutScroll = createBox();\n      copyBoxInto(boxWithoutScroll, box);\n      /**\n       * Performance TODO: Keep a cumulative scroll offset down the tree\n       * rather than loop back up the path.\n       */\n\n      for (let i = 0; i < this.path.length; i++) {\n        const node = this.path[i];\n        const {\n          scroll,\n          options\n        } = node;\n\n        if (node !== this.root && scroll && options.layoutScroll) {\n          /**\n           * If this is a new scroll root, we want to remove all previous scrolls\n           * from the viewport box.\n           */\n          if (scroll.isRoot) {\n            copyBoxInto(boxWithoutScroll, box);\n            const {\n              scroll: rootScroll\n            } = this.root;\n            /**\n             * Undo the application of page scroll that was originally added\n             * to the measured bounding box.\n             */\n\n            if (rootScroll) {\n              translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n              translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n            }\n          }\n\n          translateAxis(boxWithoutScroll.x, scroll.offset.x);\n          translateAxis(boxWithoutScroll.y, scroll.offset.y);\n        }\n      }\n\n      return boxWithoutScroll;\n    }\n\n    applyTransform(box, transformOnly = false) {\n      const withTransforms = createBox();\n      copyBoxInto(withTransforms, box);\n\n      for (let i = 0; i < this.path.length; i++) {\n        const node = this.path[i];\n\n        if (!transformOnly && node.options.layoutScroll && node.scroll && node !== node.root) {\n          transformBox(withTransforms, {\n            x: -node.scroll.offset.x,\n            y: -node.scroll.offset.y\n          });\n        }\n\n        if (!hasTransform(node.latestValues)) continue;\n        transformBox(withTransforms, node.latestValues);\n      }\n\n      if (hasTransform(this.latestValues)) {\n        transformBox(withTransforms, this.latestValues);\n      }\n\n      return withTransforms;\n    }\n\n    removeTransform(box) {\n      const boxWithoutTransform = createBox();\n      copyBoxInto(boxWithoutTransform, box);\n\n      for (let i = 0; i < this.path.length; i++) {\n        const node = this.path[i];\n        if (!node.instance) continue;\n        if (!hasTransform(node.latestValues)) continue;\n        hasScale(node.latestValues) && node.updateSnapshot();\n        const sourceBox = createBox();\n        const nodeBox = node.measurePageBox();\n        copyBoxInto(sourceBox, nodeBox);\n        removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n      }\n\n      if (hasTransform(this.latestValues)) {\n        removeBoxTransforms(boxWithoutTransform, this.latestValues);\n      }\n\n      return boxWithoutTransform;\n    }\n\n    setTargetDelta(delta) {\n      this.targetDelta = delta;\n      this.root.scheduleUpdateProjection();\n      this.isProjectionDirty = true;\n    }\n\n    setOptions(options) {\n      this.options = { ...this.options,\n        ...options,\n        crossfade: options.crossfade !== undefined ? options.crossfade : true\n      };\n    }\n\n    clearMeasurements() {\n      this.scroll = undefined;\n      this.layout = undefined;\n      this.snapshot = undefined;\n      this.prevTransformTemplateValue = undefined;\n      this.targetDelta = undefined;\n      this.target = undefined;\n      this.isLayoutDirty = false;\n    }\n\n    forceRelativeParentToResolveTarget() {\n      if (!this.relativeParent) return;\n      /**\n       * If the parent target isn't up-to-date, force it to update.\n       * This is an unfortunate de-optimisation as it means any updating relative\n       * projection will cause all the relative parents to recalculate back\n       * up the tree.\n       */\n\n      if (this.relativeParent.resolvedRelativeTargetAt !== frameData.timestamp) {\n        this.relativeParent.resolveTargetDelta(true);\n      }\n    }\n\n    resolveTargetDelta(forceRecalculation = false) {\n      var _a;\n      /**\n       * Once the dirty status of nodes has been spread through the tree, we also\n       * need to check if we have a shared node of a different depth that has itself\n       * been dirtied.\n       */\n\n\n      const lead = this.getLead();\n      this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n      this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n      this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n      const isShared = Boolean(this.resumingFrom) || this !== lead;\n      /**\n       * We don't use transform for this step of processing so we don't\n       * need to check whether any nodes have changed transform.\n       */\n\n      const canSkip = !(forceRecalculation || isShared && this.isSharedProjectionDirty || this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) || this.attemptToResolveRelativeTarget);\n      if (canSkip) return;\n      const {\n        layout,\n        layoutId\n      } = this.options;\n      /**\n       * If we have no layout, we can't perform projection, so early return\n       */\n\n      if (!this.layout || !(layout || layoutId)) return;\n      this.resolvedRelativeTargetAt = frameData.timestamp;\n      /**\n       * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n       * a relativeParent. This will allow a component to perform scale correction\n       * even if no animation has started.\n       */\n      // TODO If this is unsuccessful this currently happens every frame\n\n      if (!this.targetDelta && !this.relativeTarget) {\n        // TODO: This is a semi-repetition of further down this function, make DRY\n        const relativeParent = this.getClosestProjectingParent();\n\n        if (relativeParent && relativeParent.layout) {\n          this.relativeParent = relativeParent;\n          this.forceRelativeParentToResolveTarget();\n          this.relativeTarget = createBox();\n          this.relativeTargetOrigin = createBox();\n          calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n        } else {\n          this.relativeParent = this.relativeTarget = undefined;\n        }\n      }\n      /**\n       * If we have no relative target or no target delta our target isn't valid\n       * for this frame.\n       */\n\n\n      if (!this.relativeTarget && !this.targetDelta) return;\n      /**\n       * Lazy-init target data structure\n       */\n\n      if (!this.target) {\n        this.target = createBox();\n        this.targetWithTransforms = createBox();\n      }\n      /**\n       * If we've got a relative box for this component, resolve it into a target relative to the parent.\n       */\n\n\n      if (this.relativeTarget && this.relativeTargetOrigin && this.relativeParent && this.relativeParent.target) {\n        this.forceRelativeParentToResolveTarget();\n        calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n        /**\n         * If we've only got a targetDelta, resolve it into a target\n         */\n      } else if (this.targetDelta) {\n        if (Boolean(this.resumingFrom)) {\n          // TODO: This is creating a new object every frame\n          this.target = this.applyTransform(this.layout.layoutBox);\n        } else {\n          copyBoxInto(this.target, this.layout.layoutBox);\n        }\n\n        applyBoxDelta(this.target, this.targetDelta);\n      } else {\n        /**\n         * If no target, use own layout as target\n         */\n        copyBoxInto(this.target, this.layout.layoutBox);\n      }\n      /**\n       * If we've been told to attempt to resolve a relative target, do so.\n       */\n\n\n      if (this.attemptToResolveRelativeTarget) {\n        this.attemptToResolveRelativeTarget = false;\n        const relativeParent = this.getClosestProjectingParent();\n\n        if (relativeParent && Boolean(relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !relativeParent.options.layoutScroll && relativeParent.target) {\n          this.relativeParent = relativeParent;\n          this.forceRelativeParentToResolveTarget();\n          this.relativeTarget = createBox();\n          this.relativeTargetOrigin = createBox();\n          calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n        } else {\n          this.relativeParent = this.relativeTarget = undefined;\n        }\n      }\n      /**\n       * Increase debug counter for resolved target deltas\n       */\n\n\n      projectionFrameData.resolvedTargetDeltas++;\n    }\n\n    getClosestProjectingParent() {\n      if (!this.parent || hasScale(this.parent.latestValues) || has2DTranslate(this.parent.latestValues)) {\n        return undefined;\n      }\n\n      if (this.parent.isProjecting()) {\n        return this.parent;\n      } else {\n        return this.parent.getClosestProjectingParent();\n      }\n    }\n\n    isProjecting() {\n      return Boolean((this.relativeTarget || this.targetDelta || this.options.layoutRoot) && this.layout);\n    }\n\n    calcProjection() {\n      var _a;\n\n      const lead = this.getLead();\n      const isShared = Boolean(this.resumingFrom) || this !== lead;\n      let canSkip = true;\n      /**\n       * If this is a normal layout animation and neither this node nor its nearest projecting\n       * is dirty then we can't skip.\n       */\n\n      if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {\n        canSkip = false;\n      }\n      /**\n       * If this is a shared layout animation and this node's shared projection is dirty then\n       * we can't skip.\n       */\n\n\n      if (isShared && (this.isSharedProjectionDirty || this.isTransformDirty)) {\n        canSkip = false;\n      }\n      /**\n       * If we have resolved the target this frame we must recalculate the\n       * projection to ensure it visually represents the internal calculations.\n       */\n\n\n      if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n        canSkip = false;\n      }\n\n      if (canSkip) return;\n      const {\n        layout,\n        layoutId\n      } = this.options;\n      /**\n       * If this section of the tree isn't animating we can\n       * delete our target sources for the following frame.\n       */\n\n      this.isTreeAnimating = Boolean(this.parent && this.parent.isTreeAnimating || this.currentAnimation || this.pendingAnimation);\n\n      if (!this.isTreeAnimating) {\n        this.targetDelta = this.relativeTarget = undefined;\n      }\n\n      if (!this.layout || !(layout || layoutId)) return;\n      /**\n       * Reset the corrected box with the latest values from box, as we're then going\n       * to perform mutative operations on it.\n       */\n\n      copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n      /**\n       * Apply all the parent deltas to this box to produce the corrected box. This\n       * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n       */\n\n      applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n      const {\n        target\n      } = lead;\n      if (!target) return;\n\n      if (!this.projectionDelta) {\n        this.projectionDelta = createDelta();\n        this.projectionDeltaWithTransform = createDelta();\n      }\n\n      const prevTreeScaleX = this.treeScale.x;\n      const prevTreeScaleY = this.treeScale.y;\n      const prevProjectionTransform = this.projectionTransform;\n      /**\n       * Update the delta between the corrected box and the target box before user-set transforms were applied.\n       * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n       * for our layout reprojection, but still allow them to be scaled correctly by the user.\n       * It might be that to simplify this we may want to accept that user-set scale is also corrected\n       * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n       * to allow people to choose whether these styles are corrected based on just the\n       * layout reprojection or the final bounding box.\n       */\n\n      calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n      this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n\n      if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {\n        this.hasProjected = true;\n        this.scheduleRender();\n        this.notifyListeners(\"projectionUpdate\", target);\n      }\n      /**\n       * Increase debug counter for recalculated projections\n       */\n\n\n      projectionFrameData.recalculatedProjection++;\n    }\n\n    hide() {\n      this.isVisible = false; // TODO: Schedule render\n    }\n\n    show() {\n      this.isVisible = true; // TODO: Schedule render\n    }\n\n    scheduleRender(notifyAll = true) {\n      this.options.scheduleRender && this.options.scheduleRender();\n\n      if (notifyAll) {\n        const stack = this.getStack();\n        stack && stack.scheduleRender();\n      }\n\n      if (this.resumingFrom && !this.resumingFrom.instance) {\n        this.resumingFrom = undefined;\n      }\n    }\n\n    setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n      const snapshot = this.snapshot;\n      const snapshotLatestValues = snapshot ? snapshot.latestValues : {};\n      const mixedValues = { ...this.latestValues\n      };\n      const targetDelta = createDelta();\n\n      if (!this.relativeParent || !this.relativeParent.options.layoutRoot) {\n        this.relativeTarget = this.relativeTargetOrigin = undefined;\n      }\n\n      this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n      const relativeLayout = createBox();\n      const snapshotSource = snapshot ? snapshot.source : undefined;\n      const layoutSource = this.layout ? this.layout.source : undefined;\n      const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n      const stack = this.getStack();\n      const isOnlyMember = !stack || stack.members.length <= 1;\n      const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));\n      this.animationProgress = 0;\n      let prevRelativeTarget;\n\n      this.mixTargetDelta = latest => {\n        const progress = latest / 1000;\n        mixAxisDelta(targetDelta.x, delta.x, progress);\n        mixAxisDelta(targetDelta.y, delta.y, progress);\n        this.setTargetDelta(targetDelta);\n\n        if (this.relativeTarget && this.relativeTargetOrigin && this.layout && this.relativeParent && this.relativeParent.layout) {\n          calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n          mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n          /**\n           * If this is an unchanged relative target we can consider the\n           * projection not dirty.\n           */\n\n          if (prevRelativeTarget && boxEquals(this.relativeTarget, prevRelativeTarget)) {\n            this.isProjectionDirty = false;\n          }\n\n          if (!prevRelativeTarget) prevRelativeTarget = createBox();\n          copyBoxInto(prevRelativeTarget, this.relativeTarget);\n        }\n\n        if (isSharedLayoutAnimation) {\n          this.animationValues = mixedValues;\n          mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n        }\n\n        this.root.scheduleUpdateProjection();\n        this.scheduleRender();\n        this.animationProgress = progress;\n      };\n\n      this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n    }\n\n    startAnimation(options) {\n      this.notifyListeners(\"animationStart\");\n      this.currentAnimation && this.currentAnimation.stop();\n\n      if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n        this.resumingFrom.currentAnimation.stop();\n      }\n\n      if (this.pendingAnimation) {\n        cancelFrame(this.pendingAnimation);\n        this.pendingAnimation = undefined;\n      }\n      /**\n       * Start the animation in the next frame to have a frame with progress 0,\n       * where the target is the same as when the animation started, so we can\n       * calculate the relative positions correctly for instant transitions.\n       */\n\n\n      this.pendingAnimation = frame.update(() => {\n        globalProjectionState.hasAnimatedSinceResize = true;\n        this.currentAnimation = animateSingleValue(0, animationTarget, { ...options,\n          onUpdate: latest => {\n            this.mixTargetDelta(latest);\n            options.onUpdate && options.onUpdate(latest);\n          },\n          onComplete: () => {\n            options.onComplete && options.onComplete();\n            this.completeAnimation();\n          }\n        });\n\n        if (this.resumingFrom) {\n          this.resumingFrom.currentAnimation = this.currentAnimation;\n        }\n\n        this.pendingAnimation = undefined;\n      });\n    }\n\n    completeAnimation() {\n      if (this.resumingFrom) {\n        this.resumingFrom.currentAnimation = undefined;\n        this.resumingFrom.preserveOpacity = undefined;\n      }\n\n      const stack = this.getStack();\n      stack && stack.exitAnimationComplete();\n      this.resumingFrom = this.currentAnimation = this.animationValues = undefined;\n      this.notifyListeners(\"animationComplete\");\n    }\n\n    finishAnimation() {\n      if (this.currentAnimation) {\n        this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n        this.currentAnimation.stop();\n      }\n\n      this.completeAnimation();\n    }\n\n    applyTransformsToTarget() {\n      const lead = this.getLead();\n      let {\n        targetWithTransforms,\n        target,\n        layout,\n        latestValues\n      } = lead;\n      if (!targetWithTransforms || !target || !layout) return;\n      /**\n       * If we're only animating position, and this element isn't the lead element,\n       * then instead of projecting into the lead box we instead want to calculate\n       * a new target that aligns the two boxes but maintains the layout shape.\n       */\n\n      if (this !== lead && this.layout && layout && shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n        target = this.target || createBox();\n        const xLength = calcLength(this.layout.layoutBox.x);\n        target.x.min = lead.target.x.min;\n        target.x.max = target.x.min + xLength;\n        const yLength = calcLength(this.layout.layoutBox.y);\n        target.y.min = lead.target.y.min;\n        target.y.max = target.y.min + yLength;\n      }\n\n      copyBoxInto(targetWithTransforms, target);\n      /**\n       * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n       * This is the final box that we will then project into by calculating a transform delta and\n       * applying it to the corrected box.\n       */\n\n      transformBox(targetWithTransforms, latestValues);\n      /**\n       * Update the delta between the corrected box and the final target box, after\n       * user-set transforms are applied to it. This will be used by the renderer to\n       * create a transform style that will reproject the element from its layout layout\n       * into the desired bounding box.\n       */\n\n      calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n    }\n\n    registerSharedNode(layoutId, node) {\n      if (!this.sharedNodes.has(layoutId)) {\n        this.sharedNodes.set(layoutId, new NodeStack());\n      }\n\n      const stack = this.sharedNodes.get(layoutId);\n      stack.add(node);\n      const config = node.options.initialPromotionConfig;\n      node.promote({\n        transition: config ? config.transition : undefined,\n        preserveFollowOpacity: config && config.shouldPreserveFollowOpacity ? config.shouldPreserveFollowOpacity(node) : undefined\n      });\n    }\n\n    isLead() {\n      const stack = this.getStack();\n      return stack ? stack.lead === this : true;\n    }\n\n    getLead() {\n      var _a;\n\n      const {\n        layoutId\n      } = this.options;\n      return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n    }\n\n    getPrevLead() {\n      var _a;\n\n      const {\n        layoutId\n      } = this.options;\n      return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n    }\n\n    getStack() {\n      const {\n        layoutId\n      } = this.options;\n      if (layoutId) return this.root.sharedNodes.get(layoutId);\n    }\n\n    promote({\n      needsReset,\n      transition,\n      preserveFollowOpacity\n    } = {}) {\n      const stack = this.getStack();\n      if (stack) stack.promote(this, preserveFollowOpacity);\n\n      if (needsReset) {\n        this.projectionDelta = undefined;\n        this.needsReset = true;\n      }\n\n      if (transition) this.setOptions({\n        transition\n      });\n    }\n\n    relegate() {\n      const stack = this.getStack();\n\n      if (stack) {\n        return stack.relegate(this);\n      } else {\n        return false;\n      }\n    }\n\n    resetRotation() {\n      const {\n        visualElement\n      } = this.options;\n      if (!visualElement) return; // If there's no detected rotation values, we can early return without a forced render.\n\n      let hasRotate = false;\n      /**\n       * An unrolled check for rotation values. Most elements don't have any rotation and\n       * skipping the nested loop and new object creation is 50% faster.\n       */\n\n      const {\n        latestValues\n      } = visualElement;\n\n      if (latestValues.rotate || latestValues.rotateX || latestValues.rotateY || latestValues.rotateZ) {\n        hasRotate = true;\n      } // If there's no rotation values, we don't need to do any more.\n\n\n      if (!hasRotate) return;\n      const resetValues = {}; // Check the rotate value of all axes and reset to 0\n\n      for (let i = 0; i < transformAxes.length; i++) {\n        const key = \"rotate\" + transformAxes[i]; // Record the rotation and then temporarily set it to 0\n\n        if (latestValues[key]) {\n          resetValues[key] = latestValues[key];\n          visualElement.setStaticValue(key, 0);\n        }\n      } // Force a render of this element to apply the transform with all rotations\n      // set to 0.\n\n\n      visualElement.render(); // Put back all the values we reset\n\n      for (const key in resetValues) {\n        visualElement.setStaticValue(key, resetValues[key]);\n      } // Schedule a render for the next frame. This ensures we won't visually\n      // see the element with the reset rotate value applied.\n\n\n      visualElement.scheduleRender();\n    }\n\n    getProjectionStyles(styleProp = {}) {\n      var _a, _b; // TODO: Return lifecycle-persistent object\n\n\n      const styles = {};\n      if (!this.instance || this.isSVG) return styles;\n\n      if (!this.isVisible) {\n        return {\n          visibility: \"hidden\"\n        };\n      } else {\n        styles.visibility = \"\";\n      }\n\n      const transformTemplate = this.getTransformTemplate();\n\n      if (this.needsReset) {\n        this.needsReset = false;\n        styles.opacity = \"\";\n        styles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n        styles.transform = transformTemplate ? transformTemplate(this.latestValues, \"\") : \"none\";\n        return styles;\n      }\n\n      const lead = this.getLead();\n\n      if (!this.projectionDelta || !this.layout || !lead.target) {\n        const emptyStyles = {};\n\n        if (this.options.layoutId) {\n          emptyStyles.opacity = this.latestValues.opacity !== undefined ? this.latestValues.opacity : 1;\n          emptyStyles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n        }\n\n        if (this.hasProjected && !hasTransform(this.latestValues)) {\n          emptyStyles.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n          this.hasProjected = false;\n        }\n\n        return emptyStyles;\n      }\n\n      const valuesToRender = lead.animationValues || lead.latestValues;\n      this.applyTransformsToTarget();\n      styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n\n      if (transformTemplate) {\n        styles.transform = transformTemplate(valuesToRender, styles.transform);\n      }\n\n      const {\n        x,\n        y\n      } = this.projectionDelta;\n      styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n\n      if (lead.animationValues) {\n        /**\n         * If the lead component is animating, assign this either the entering/leaving\n         * opacity\n         */\n        styles.opacity = lead === this ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;\n      } else {\n        /**\n         * Or we're not animating at all, set the lead component to its layout\n         * opacity and other components to hidden.\n         */\n        styles.opacity = lead === this ? valuesToRender.opacity !== undefined ? valuesToRender.opacity : \"\" : valuesToRender.opacityExit !== undefined ? valuesToRender.opacityExit : 0;\n      }\n      /**\n       * Apply scale correction\n       */\n\n\n      for (const key in scaleCorrectors) {\n        if (valuesToRender[key] === undefined) continue;\n        const {\n          correct,\n          applyTo\n        } = scaleCorrectors[key];\n        /**\n         * Only apply scale correction to the value if we have an\n         * active projection transform. Otherwise these values become\n         * vulnerable to distortion if the element changes size without\n         * a corresponding layout animation.\n         */\n\n        const corrected = styles.transform === \"none\" ? valuesToRender[key] : correct(valuesToRender[key], lead);\n\n        if (applyTo) {\n          const num = applyTo.length;\n\n          for (let i = 0; i < num; i++) {\n            styles[applyTo[i]] = corrected;\n          }\n        } else {\n          styles[key] = corrected;\n        }\n      }\n      /**\n       * Disable pointer events on follow components. This is to ensure\n       * that if a follow component covers a lead component it doesn't block\n       * pointer events on the lead.\n       */\n\n\n      if (this.options.layoutId) {\n        styles.pointerEvents = lead === this ? resolveMotionValue(styleProp.pointerEvents) || \"\" : \"none\";\n      }\n\n      return styles;\n    }\n\n    clearSnapshot() {\n      this.resumeFrom = this.snapshot = undefined;\n    } // Only run on root\n\n\n    resetTree() {\n      this.root.nodes.forEach(node => {\n        var _a;\n\n        return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n      });\n      this.root.nodes.forEach(clearMeasurements);\n      this.root.sharedNodes.clear();\n    }\n\n  };\n}\n\nfunction updateLayout(node) {\n  node.updateLayout();\n}\n\nfunction notifyLayoutUpdate(node) {\n  var _a;\n\n  const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n\n  if (node.isLead() && node.layout && snapshot && node.hasListeners(\"didUpdate\")) {\n    const {\n      layoutBox: layout,\n      measuredBox: measuredLayout\n    } = node.layout;\n    const {\n      animationType\n    } = node.options;\n    const isShared = snapshot.source !== node.layout.source; // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n    // animations for instance if layout=\"size\" and an element has only changed position\n\n    if (animationType === \"size\") {\n      eachAxis(axis => {\n        const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n        const length = calcLength(axisSnapshot);\n        axisSnapshot.min = layout[axis].min;\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    } else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n      eachAxis(axis => {\n        const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n        const length = calcLength(layout[axis]);\n        axisSnapshot.max = axisSnapshot.min + length;\n        /**\n         * Ensure relative target gets resized and rerendererd\n         */\n\n        if (node.relativeTarget && !node.currentAnimation) {\n          node.isProjectionDirty = true;\n          node.relativeTarget[axis].max = node.relativeTarget[axis].min + length;\n        }\n      });\n    }\n\n    const layoutDelta = createDelta();\n    calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n    const visualDelta = createDelta();\n\n    if (isShared) {\n      calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n    } else {\n      calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n    }\n\n    const hasLayoutChanged = !isDeltaZero(layoutDelta);\n    let hasRelativeTargetChanged = false;\n\n    if (!node.resumeFrom) {\n      const relativeParent = node.getClosestProjectingParent();\n      /**\n       * If the relativeParent is itself resuming from a different element then\n       * the relative snapshot is not relavent\n       */\n\n      if (relativeParent && !relativeParent.resumeFrom) {\n        const {\n          snapshot: parentSnapshot,\n          layout: parentLayout\n        } = relativeParent;\n\n        if (parentSnapshot && parentLayout) {\n          const relativeSnapshot = createBox();\n          calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n          const relativeLayout = createBox();\n          calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n\n          if (!boxEquals(relativeSnapshot, relativeLayout)) {\n            hasRelativeTargetChanged = true;\n          }\n\n          if (relativeParent.options.layoutRoot) {\n            node.relativeTarget = relativeLayout;\n            node.relativeTargetOrigin = relativeSnapshot;\n            node.relativeParent = relativeParent;\n          }\n        }\n      }\n    }\n\n    node.notifyListeners(\"didUpdate\", {\n      layout,\n      snapshot,\n      delta: visualDelta,\n      layoutDelta,\n      hasLayoutChanged,\n      hasRelativeTargetChanged\n    });\n  } else if (node.isLead()) {\n    const {\n      onExitComplete\n    } = node.options;\n    onExitComplete && onExitComplete();\n  }\n  /**\n   * Clearing transition\n   * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n   * and why we need it at all\n   */\n\n\n  node.options.transition = undefined;\n}\n\nfunction propagateDirtyNodes(node) {\n  /**\n   * Increase debug counter for nodes encountered this frame\n   */\n  projectionFrameData.totalNodes++;\n  if (!node.parent) return;\n  /**\n   * If this node isn't projecting, propagate isProjectionDirty. It will have\n   * no performance impact but it will allow the next child that *is* projecting\n   * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n   * correcting.\n   */\n\n  if (!node.isProjecting()) {\n    node.isProjectionDirty = node.parent.isProjectionDirty;\n  }\n  /**\n   * Propagate isSharedProjectionDirty and isTransformDirty\n   * throughout the whole tree. A future revision can take another look at\n   * this but for safety we still recalcualte shared nodes.\n   */\n\n\n  node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty || node.parent.isProjectionDirty || node.parent.isSharedProjectionDirty));\n  node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\n\nfunction cleanDirtyNodes(node) {\n  node.isProjectionDirty = node.isSharedProjectionDirty = node.isTransformDirty = false;\n}\n\nfunction clearSnapshot(node) {\n  node.clearSnapshot();\n}\n\nfunction clearMeasurements(node) {\n  node.clearMeasurements();\n}\n\nfunction resetTransformStyle(node) {\n  const {\n    visualElement\n  } = node.options;\n\n  if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n    visualElement.notify(\"BeforeLayoutMeasure\");\n  }\n\n  node.resetTransform();\n}\n\nfunction finishAnimation(node) {\n  node.finishAnimation();\n  node.targetDelta = node.relativeTarget = node.target = undefined;\n}\n\nfunction resolveTargetDelta(node) {\n  node.resolveTargetDelta();\n}\n\nfunction calcProjection(node) {\n  node.calcProjection();\n}\n\nfunction resetRotation(node) {\n  node.resetRotation();\n}\n\nfunction removeLeadSnapshots(stack) {\n  stack.removeLeadSnapshot();\n}\n\nfunction mixAxisDelta(output, delta, p) {\n  output.translate = mix(delta.translate, 0, p);\n  output.scale = mix(delta.scale, 1, p);\n  output.origin = delta.origin;\n  output.originPoint = delta.originPoint;\n}\n\nfunction mixAxis(output, from, to, p) {\n  output.min = mix(from.min, to.min, p);\n  output.max = mix(from.max, to.max, p);\n}\n\nfunction mixBox(output, from, to, p) {\n  mixAxis(output.x, from.x, to.x, p);\n  mixAxis(output.y, from.y, to.y, p);\n}\n\nfunction hasOpacityCrossfade(node) {\n  return node.animationValues && node.animationValues.opacityExit !== undefined;\n}\n\nconst defaultLayoutTransition = {\n  duration: 0.45,\n  ease: [0.4, 0, 0.1, 1]\n};\n\nfunction mountNodeEarly(node, elementId) {\n  /**\n   * Rather than searching the DOM from document we can search the\n   * path for the deepest mounted ancestor and search from there\n   */\n  let searchNode = node.root;\n\n  for (let i = node.path.length - 1; i >= 0; i--) {\n    if (Boolean(node.path[i].instance)) {\n      searchNode = node.path[i];\n      break;\n    }\n  }\n\n  const searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n  const element = searchElement.querySelector(`[data-projection-id=\"${elementId}\"]`);\n  if (element) node.mount(element, true);\n}\n\nfunction roundAxis(axis) {\n  axis.min = Math.round(axis.min);\n  axis.max = Math.round(axis.max);\n}\n\nfunction roundBox(box) {\n  roundAxis(box.x);\n  roundAxis(box.y);\n}\n\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n  return animationType === \"position\" || animationType === \"preserve-aspect\" && !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2);\n}\n\nexport { cleanDirtyNodes, createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };","map":{"version":3,"sources":["/home/soumyajit/Personal_Projects/topgram-app/frontend/node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs"],"names":["cancelFrame","steps","frame","SubscriptionManager","mixValues","copyBoxInto","translateAxis","transformBox","applyBoxDelta","applyTreeDeltas","calcRelativePosition","calcRelativeBox","calcBoxDelta","calcLength","isNear","removeBoxTransforms","createBox","createDelta","getValueTransition","boxEquals","isDeltaZero","aspectRatio","NodeStack","scaleCorrectors","buildProjectionTransform","eachAxis","hasTransform","hasScale","has2DTranslate","FlatTree","resolveMotionValue","globalProjectionState","delay","mix","record","isSVGElement","animateSingleValue","frameData","transformAxes","animationTarget","id","projectionFrameData","type","totalNodes","resolvedTargetDeltas","recalculatedProjection","createProjectionNode","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","ProjectionNode","constructor","elementId","latestValues","parent","animationId","children","Set","options","isTreeAnimating","isAnimationBlocked","isLayoutDirty","isProjectionDirty","isSharedProjectionDirty","isTransformDirty","updateManuallyBlocked","updateBlockedByResize","isUpdating","isSVG","needsReset","shouldResetTransform","treeScale","x","y","eventHandlers","Map","potentialNodes","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","forEach","propagateDirtyNodes","resolveTargetDelta","calcProjection","cleanDirtyNodes","hasProjected","isVisible","animationProgress","sharedNodes","root","path","depth","registerPotentialNode","i","length","addEventListener","name","handler","has","set","get","add","notifyListeners","args","subscriptionManager","notify","hasListeners","node","mount","instance","layoutId","layout","visualElement","current","delete","cancelDelay","resizeUnblockUpdate","hasAnimatedSinceResize","finishAnimation","registerSharedNode","animate","delta","hasLayoutChanged","hasRelativeTargetChanged","newLayout","isTreeAnimationBlocked","target","undefined","relativeTarget","layoutTransition","transition","getDefaultTransition","defaultLayoutTransition","onLayoutAnimationStart","onLayoutAnimationComplete","getProps","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","layoutRoot","resumeFrom","currentAnimation","resumingFrom","setAnimationOrigin","animationOptions","onPlay","onComplete","shouldReduceMotion","startAnimation","isLead","onExitComplete","unmount","willUpdate","remove","stack","getStack","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetRotation","getTransformTemplate","transformTemplate","shouldNotifyListeners","updateScroll","prevTransformTemplateValue","updateSnapshot","didUpdate","updateWasBlocked","clearMeasurements","size","mountNodeEarly","clear","resetTransformStyle","updateLayout","notifyLayoutUpdate","update","process","preRender","render","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","scheduleCheckAfterUnmount","postRender","snapshot","measure","alwaysMeasureLayout","prevLayout","layoutCorrected","projectionDelta","layoutBox","phase","needsMeasurement","Boolean","layoutScroll","scroll","isRoot","offset","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","scheduleRender","removeTransform","pageBox","measurePageBox","removeElementScroll","roundBox","measuredBox","source","box","measureViewportBox","boxWithoutScroll","rootScroll","applyTransform","transformOnly","withTransforms","boxWithoutTransform","sourceBox","nodeBox","setTargetDelta","targetDelta","setOptions","crossfade","forceRelativeParentToResolveTarget","relativeParent","resolvedRelativeTargetAt","timestamp","forceRecalculation","_a","lead","getLead","isShared","canSkip","attemptToResolveRelativeTarget","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","isProjecting","pendingAnimation","projectionDeltaWithTransform","prevTreeScaleX","prevTreeScaleY","prevProjectionTransform","projectionTransform","hide","show","notifyAll","snapshotLatestValues","mixedValues","relativeLayout","snapshotSource","layoutSource","isSharedLayoutAnimation","isOnlyMember","members","shouldCrossfadeOpacity","some","hasOpacityCrossfade","prevRelativeTarget","mixTargetDelta","latest","progress","mixAxisDelta","mixBox","animationValues","stop","onUpdate","completeAnimation","preserveOpacity","exitAnimationComplete","applyTransformsToTarget","shouldAnimatePositionOnly","animationType","xLength","min","max","yLength","config","initialPromotionConfig","promote","preserveFollowOpacity","shouldPreserveFollowOpacity","getPrevLead","prevLead","relegate","hasRotate","rotate","rotateX","rotateY","rotateZ","resetValues","key","setStaticValue","getProjectionStyles","styleProp","_b","styles","visibility","opacity","pointerEvents","transform","emptyStyles","valuesToRender","transformOrigin","origin","opacityExit","correct","applyTo","corrected","num","resetTree","measuredLayout","axis","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","removeLeadSnapshot","output","p","translate","scale","originPoint","mixAxis","from","to","duration","ease","searchNode","searchElement","document","element","querySelector","roundAxis","Math","round"],"mappings":"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","sourcesContent":["import { cancelFrame, steps, frame } from '../../frameloop/index.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero, aspectRatio } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { record } from '../../debug/record.mjs';\nimport { isSVGElement } from '../../render/dom/utils/is-svg-element.mjs';\nimport { animateSingleValue } from '../../animation/interfaces/single-value.mjs';\nimport { frameData } from '../../frameloop/data.mjs';\n\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\n/**\n * Use a mutable data object for debug data so as to not create a new\n * object every frame.\n */\nconst projectionFrameData = {\n    type: \"projectionFrame\",\n    totalNodes: 0,\n    resolvedTargetDeltas: 0,\n    recalculatedProjection: 0,\n};\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(elementId, latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this node needs\n             * recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Flag to true if the layout *or* transform has changed. This then gets propagated\n             * throughout the projection tree, forcing any element below to recalculate on the next frame.\n             */\n            this.isSharedProjectionDirty = false;\n            /**\n             * Flag transform dirty. This gets propagated throughout the whole tree but is only\n             * respected by shared nodes.\n             */\n            this.isTransformDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            // Note: Currently only running on root node\n            this.potentialNodes = new Map();\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                /**\n                 * Reset debug counts. Manually resetting rather than creating a new\n                 * object each frame.\n                 */\n                projectionFrameData.totalNodes =\n                    projectionFrameData.resolvedTargetDeltas =\n                        projectionFrameData.recalculatedProjection =\n                            0;\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n                this.nodes.forEach(cleanDirtyNodes);\n                record(projectionFrameData);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.elementId = elementId;\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            elementId && this.root.registerPotentialNode(elementId, this);\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        registerPotentialNode(elementId, node) {\n            this.potentialNodes.set(elementId, node);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = false) {\n            if (this.instance)\n                return;\n            this.isSVG = isSVGElement(instance);\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            this.elementId && this.root.potentialNodes.delete(this.elementId);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition ||\n                        visualElement.getDefaultTransition() ||\n                        defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const targetChanged = !this.targetLayout ||\n                        !boxEquals(this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (this.options.layoutRoot ||\n                        (this.resumeFrom && this.resumeFrom.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion ||\n                            this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged &&\n                            this.animationProgress === 0) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            cancelFrame(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return (this.isAnimationBlocked ||\n                (this.parent && this.parent.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            this.nodes && this.nodes.forEach(resetRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        // Note: Currently only running on root node\n        didUpdate() {\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating)\n                return;\n            this.isUpdating = false;\n            /**\n             * Search for and mount newly-added projection elements.\n             *\n             * TODO: Every time a new component is rendered we could search up the tree for\n             * the closest mounted node and query from there rather than document.\n             */\n            if (this.potentialNodes.size) {\n                this.potentialNodes.forEach(mountNodeEarly);\n                this.potentialNodes.clear();\n            }\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            // Flush any scheduled updates\n            steps.update.process(frameData);\n            steps.preRender.process(frameData);\n            steps.render.process(frameData);\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            frame.preRender(this.updateProjection, false, true);\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            frame.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n        }\n        updateLayout() {\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement &&\n                visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement) {\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot: checkIsScrollRoot(this.instance),\n                    offset: measureScroll(this.instance),\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            const { scroll } = this.root;\n            if (scroll) {\n                translateAxis(box.x, scroll.offset.x);\n                translateAxis(box.y, scroll.offset.y);\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.isRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                        const { scroll: rootScroll } = this.root;\n                        /**\n                         * Undo the application of page scroll that was originally added\n                         * to the measured bounding box.\n                         */\n                        if (rootScroll) {\n                            translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n                            translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n                        }\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n            this.isProjectionDirty = true;\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        forceRelativeParentToResolveTarget() {\n            if (!this.relativeParent)\n                return;\n            /**\n             * If the parent target isn't up-to-date, force it to update.\n             * This is an unfortunate de-optimisation as it means any updating relative\n             * projection will cause all the relative parents to recalculate back\n             * up the tree.\n             */\n            if (this.relativeParent.resolvedRelativeTargetAt !==\n                frameData.timestamp) {\n                this.relativeParent.resolveTargetDelta(true);\n            }\n        }\n        resolveTargetDelta(forceRecalculation = false) {\n            var _a;\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            const canSkip = !(forceRecalculation ||\n                (isShared && this.isSharedProjectionDirty) ||\n                this.isProjectionDirty ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) ||\n                this.attemptToResolveRelativeTarget);\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            this.resolvedRelativeTargetAt = frameData.timestamp;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            // TODO If this is unsuccessful this currently happens every frame\n            if (!this.targetDelta && !this.relativeTarget) {\n                // TODO: This is a semi-repetition of further down this function, make DRY\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent && relativeParent.layout) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                this.relativeParent &&\n                this.relativeParent.target) {\n                this.forceRelativeParentToResolveTarget();\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * Increase debug counter for resolved target deltas\n             */\n            projectionFrameData.resolvedTargetDeltas++;\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if (this.parent.isProjecting()) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        isProjecting() {\n            return Boolean((this.relativeTarget ||\n                this.targetDelta ||\n                this.options.layoutRoot) &&\n                this.layout);\n        }\n        calcProjection() {\n            var _a;\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            /**\n             * If this is a normal layout animation and neither this node nor its nearest projecting\n             * is dirty then we can't skip.\n             */\n            if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If this is a shared layout animation and this node's shared projection is dirty then\n             * we can't skip.\n             */\n            if (isShared &&\n                (this.isSharedProjectionDirty || this.isTransformDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If we have resolved the target this frame we must recalculate the\n             * projection to ensure it visually represents the internal calculations.\n             */\n            if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n                canSkip = false;\n            }\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            const { target } = lead;\n            if (!target)\n                return;\n            if (!this.projectionDelta) {\n                this.projectionDelta = createDelta();\n                this.projectionDeltaWithTransform = createDelta();\n            }\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            const prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform ||\n                this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n            /**\n             * Increase debug counter for recalculated projections\n             */\n            projectionFrameData.recalculatedProjection++;\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            this.options.scheduleRender && this.options.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot\n                ? snapshot.latestValues\n                : {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            if (!this.relativeParent ||\n                !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            let prevRelativeTarget;\n            this.mixTargetDelta = (latest) => {\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    this.relativeParent &&\n                    this.relativeParent.layout) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                    /**\n                     * If this is an unchanged relative target we can consider the\n                     * projection not dirty.\n                     */\n                    if (prevRelativeTarget &&\n                        boxEquals(this.relativeTarget, prevRelativeTarget)) {\n                        this.isProjectionDirty = false;\n                    }\n                    if (!prevRelativeTarget)\n                        prevRelativeTarget = createBox();\n                    copyBoxInto(prevRelativeTarget, this.relativeTarget);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation && this.currentAnimation.stop();\n            if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n                this.resumingFrom.currentAnimation.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelFrame(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = frame.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = animateSingleValue(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest) => {\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onComplete: () => {\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity\n                    ? config.shouldPreserveFollowOpacity(node)\n                    : undefined,\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected rotation values, we can early return without a forced render.\n            let hasRotate = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ) {\n                hasRotate = true;\n            }\n            // If there's no rotation values, we don't need to do any more.\n            if (!hasRotate)\n                return;\n            const resetValues = {};\n            // Check the rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                const key = \"rotate\" + transformAxes[i];\n                // Record the rotation and then temporarily set it to 0\n                if (latestValues[key]) {\n                    resetValues[key] = latestValues[key];\n                    visualElement.setStaticValue(key, 0);\n                }\n            }\n            // Force a render of this element to apply the transform with all rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp = {}) {\n            var _a, _b;\n            // TODO: Return lifecycle-persistent object\n            const styles = {};\n            if (!this.instance || this.isSVG)\n                return styles;\n            if (!this.isVisible) {\n                return { visibility: \"hidden\" };\n            }\n            else {\n                styles.visibility = \"\";\n            }\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo } = scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */\n                const corrected = styles.transform === \"none\"\n                    ? valuesToRender[key]\n                    : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n                /**\n                 * Ensure relative target gets resized and rerendererd\n                 */\n                if (node.relativeTarget && !node.currentAnimation) {\n                    node.isProjectionDirty = true;\n                    node.relativeTarget[axis].max =\n                        node.relativeTarget[axis].min + length;\n                }\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEquals(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Increase debug counter for nodes encountered this frame\n     */\n    projectionFrameData.totalNodes++;\n    if (!node.parent)\n        return;\n    /**\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\n     * no performance impact but it will allow the next child that *is* projecting\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n     * correcting.\n     */\n    if (!node.isProjecting()) {\n        node.isProjectionDirty = node.parent.isProjectionDirty;\n    }\n    /**\n     * Propagate isSharedProjectionDirty and isTransformDirty\n     * throughout the whole tree. A future revision can take another look at\n     * this but for safety we still recalcualte shared nodes.\n     */\n    node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty ||\n        node.parent.isProjectionDirty ||\n        node.parent.isSharedProjectionDirty));\n    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n    node.isProjectionDirty =\n        node.isSharedProjectionDirty =\n            node.isTransformDirty =\n                false;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetRotation(node) {\n    node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mix(delta.translate, 0, p);\n    output.scale = mix(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mix(from.min, to.min, p);\n    output.max = mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nfunction mountNodeEarly(node, elementId) {\n    /**\n     * Rather than searching the DOM from document we can search the\n     * path for the deepest mounted ancestor and search from there\n     */\n    let searchNode = node.root;\n    for (let i = node.path.length - 1; i >= 0; i--) {\n        if (Boolean(node.path[i].instance)) {\n            searchNode = node.path[i];\n            break;\n        }\n    }\n    const searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n    const element = searchElement.querySelector(`[data-projection-id=\"${elementId}\"]`);\n    if (element)\n        node.mount(element, true);\n}\nfunction roundAxis(axis) {\n    axis.min = Math.round(axis.min);\n    axis.max = Math.round(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\n\nexport { cleanDirtyNodes, createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };\n"]},"metadata":{},"sourceType":"module"}