{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { MY_POST_URL } from \"../../service/apiCalls\"; //Fetch my posts\n\nexport const fetchMyPostsAction = createAsyncThunk('fetchMyPostsAction', async () => {\n  const response = await MY_POST_URL();\n  return response;\n});\nconst fetchMyPostsSlice = createSlice({\n  name: 'fetchMyPostsInfo',\n  initialState: {\n    isLoading: false,\n    data: null,\n    isError: false\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchMyPostsAction.pending, (state, action) => {\n      state.isLoading = true;\n    });\n    builder.addCase(fetchMyPostsAction.fulfilled, (state, action) => {\n      var _action$payload;\n\n      state.isLoading = false;\n      state.data = (_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.data;\n    });\n    builder.addCase(fetchMyPostsAction.rejected, (state, action) => {\n      state.isError = true;\n    });\n  }\n});\nexport default fetchMyPostsSlice.reducer;","map":{"version":3,"sources":["/home/soumyajit/Personal_Projects/topgram-app/frontend/src/lib/actionReducerSlice/fetchMyPostsSlice.js"],"names":["createSlice","createAsyncThunk","MY_POST_URL","fetchMyPostsAction","response","fetchMyPostsSlice","name","initialState","isLoading","data","isError","extraReducers","builder","addCase","pending","state","action","fulfilled","payload","rejected","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,SAASC,WAAT,QAA4B,wBAA5B,C,CAEA;;AACA,OAAO,MAAMC,kBAAkB,GAAGF,gBAAgB,CAAC,oBAAD,EAAuB,YAAW;AAChF,QAAMG,QAAQ,GAAG,MAAMF,WAAW,EAAlC;AACA,SAAOE,QAAP;AACH,CAHiD,CAA3C;AAKP,MAAMC,iBAAiB,GAAGL,WAAW,CAAC;AAClCM,EAAAA,IAAI,EAAE,kBAD4B;AAElCC,EAAAA,YAAY,EAAE;AACVC,IAAAA,SAAS,EAAE,KADD;AAEVC,IAAAA,IAAI,EAAE,IAFI;AAGVC,IAAAA,OAAO,EAAE;AAHC,GAFoB;AAOlCC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AACxBA,IAAAA,OAAO,CAACC,OAAR,CAAgBV,kBAAkB,CAACW,OAAnC,EAA4C,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC3DD,MAAAA,KAAK,CAACP,SAAN,GAAkB,IAAlB;AACH,KAFD;AAGAI,IAAAA,OAAO,CAACC,OAAR,CAAgBV,kBAAkB,CAACc,SAAnC,EAA8C,CAACF,KAAD,EAAQC,MAAR,KAAmB;AAAA;;AAC7DD,MAAAA,KAAK,CAACP,SAAN,GAAkB,KAAlB;AACAO,MAAAA,KAAK,CAACN,IAAN,sBAAaO,MAAM,CAACE,OAApB,oDAAa,gBAAgBT,IAA7B;AACH,KAHD;AAIAG,IAAAA,OAAO,CAACC,OAAR,CAAgBV,kBAAkB,CAACgB,QAAnC,EAA6C,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAC5DD,MAAAA,KAAK,CAACL,OAAN,GAAgB,IAAhB;AACH,KAFD;AAGH;AAlBiC,CAAD,CAArC;AAqBA,eAAeL,iBAAiB,CAACe,OAAjC","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { MY_POST_URL } from \"../../service/apiCalls\";\n\n//Fetch my posts\nexport const fetchMyPostsAction = createAsyncThunk('fetchMyPostsAction', async() => {\n    const response = await MY_POST_URL();\n    return response;\n}) \n\nconst fetchMyPostsSlice = createSlice({\n    name: 'fetchMyPostsInfo',\n    initialState: {\n        isLoading: false,\n        data: null,\n        isError: false\n    },\n    extraReducers: (builder) => {\n        builder.addCase(fetchMyPostsAction.pending, (state, action) => {\n            state.isLoading = true;\n        })\n        builder.addCase(fetchMyPostsAction.fulfilled, (state, action) => {\n            state.isLoading = false;\n            state.data = action.payload?.data;\n        })\n        builder.addCase(fetchMyPostsAction.rejected, (state, action) => {\n            state.isError = true;\n        })\n    }\n})\n\nexport default fetchMyPostsSlice.reducer;"]},"metadata":{},"sourceType":"module"}